<script>
    let tableData = <%-JSON.stringify(latestReportWithLocation)%>;
    let updateTimestamp = <%-JSON.stringify(lastUpdateTimestamp)%>;
    const [totalsTable, reportTable] = Array.prototype.slice.call(document.querySelectorAll('table'), 0);
    const totalsDataRows =
        Array.prototype.slice.call(totalsTable.querySelectorAll('tr'), 1);
    const tableDataRows = 
        Array.prototype.slice.call(reportTable.querySelectorAll('tr'), 1);
    const sortTypes = {
        confirmedCounts: 2,
        deathCounts: 3,
        recoveredCounts: 4,
        locationNearest: 7,
    };
    const sortTypeOptions = {
        confirmedCounts: 0,
        deathCounts: 1,
        recoveredCounts: 2,
        locationNearest: 3,
    };

    const lastUpdateElem = document.querySelector('.last-update-timestamp');
    const autoUpdateReportSwitchElem = document.getElementById('auto-update-report-switch');

    const sortTypeDropdown = document.getElementById('sort-type-dropdown');
    const sortTypeDropdownOptions = document.querySelectorAll('#sort-type-dropdown option');
    let activeSort = sortTypes[sortTypeDropdownOptions[sortTypeDropdown.selectedIndex].value];

    function updateRenderedTimestamp(updateTimestamp) {
        lastUpdateElem.textContent = (new Date(updateTimestamp)).toLocaleString();
    }

    function updateRenderedTotals(updatedTotals) {
        updateTableData(updatedTotals.slice(1), totalsDataRows);
    }

    function updateTableData(tableData, tableDataRowElems) {
        tableDataRowElems
            .forEach((tableDataRow, tableDataRowIndex) => {
                const sortedTableRow = tableData[tableDataRowIndex];
                const tableDataRowCells = Array.prototype.slice.call(tableDataRow.querySelectorAll('td'));
                tableDataRowCells.forEach((tableDataRowCell, tableDataRowCellIndex) => {
                    tableDataRowCell.textContent = sortedTableRow[tableDataRowCellIndex].toLocaleString();
                });
            });
    }

    function sortTableDataByColumn(tableData, columnIndex, isAscending = false) {
        const sortedTableData = tableData
            .slice(1)
            .sort((row1, row2) => {
                const row1ColumnValue = row1[columnIndex]
                const row2ColumnValue = row2[columnIndex];
                if (isAscending) {
                    return row1ColumnValue - row2ColumnValue;
                }
                return row2ColumnValue - row1ColumnValue;
            });
        
        updateTableData(sortedTableData, tableDataRows);
    }

    function sortTableDataByLocation(tableData, lat, long) {
        tableData
            .slice(1)
            .forEach(tableRow => {
                const [rowLat, rowLong] = [
                    parseFloat(tableRow[5], 10),
                    parseFloat(tableRow[6], 10)
                ];
                const distance = `${getDistanceFromLatLonInMiles(rowLat, rowLong, lat, long)}`;

                if (typeof tableRow[7] === 'string') {
                    tableRow[7] = distance;
                } else {
                    tableRow.push(distance);
                }
            });

        sortTableDataByColumn(tableData, sortTypes.locationNearest, true);
    }

    function sortBasedOffSortType(tableData, sortTypeColumn) {
        if (sortTypeColumn === sortTypes.locationNearest) {
            navigator.geolocation.getCurrentPosition((pos) => {
                const { latitude, longitude } = pos.coords;
                activeSort = sortTypes.locationNearest;
                sortTableDataByLocation(tableData, latitude, longitude);
            }, (err) => {
                console.error(err);
            });
        } else {
            activeSort = sortTypeColumn;
            sortTableDataByColumn(tableData, sortTypeColumn);
        }
    }

    // https://stackoverflow.com/a/27943 - Haversine formula
    const R = 6371 * 0.6213712; // Radius of the earth in miles
    const radianDegreeRatio = Math.PI / 180;
    function getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {
        const dLat = (lat2 - lat1) * radianDegreeRatio;
        const dLon = (lon2 - lon1) * radianDegreeRatio;
        const halfLat = dLat / 2;
        const halfLong = dLon / 2;
        const a = 
            Math.pow(Math.sin(halfLat), 2) +
            Math.cos(lat1 * radianDegreeRatio) * Math.cos(lat2 * radianDegreeRatio) * 
            Math.pow(Math.sin(halfLong), 2); 
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); 
        const d = R * c; // Distance in miles
        return d;
    }

    function getLatestReport() {
        return fetch(`/api/latest-report?lastUpdateTimestamp=${updateTimestamp}`)
            .then(response => {
                if (response.ok) {
                    if (response.status === 204) {
                        return null;
                    }
                    return response.json();
                }
                throw new Error(`${response.status}: ${response.statusText}`);
            });
    }

    function requestForNotifications() {
        // Let's check if the browser supports notifications
        if (!('Notification' in window)) {
            return Promise.reject();
        }
        // Let's check whether notification permissions have already been granted
        if (Notification.permission === 'granted') {
            return Promise.resolve();
        }
        // Otherwise, we need to ask the user for permission
        if (Notification.permission !== 'denied') {
            return Notification.requestPermission()
                .then(permission => {
                    // If the user accepts, let's create a notification
                    if (permission !== 'granted') {
                        throw new Error('Permission not granted');
                    }
                });
        }
        return Promise.reject();
    }

    /*
        Starts poll to check for report updates.
        Re-renders view with latest updates when there are changes.
        Will retain the sort, the user was last on.
    */
    const reportUpdatePollIntervalInMs = 2 * 60 * 1000; // 2 minutes
    let reportUpdateTimeoutId = null;
    let areNotificationsEnabled = false;

    function initReportUpdatePoll() {
        console.log('Report update poll started');

        requestForNotifications()
            .then(() => (areNotificationsEnabled = true))
            .catch(() => (areNotificationsEnabled = false));

        reportUpdateTimeoutId = setTimeout(async function _updateReport() {
            console.log('Polling for latest report changes');

            try {
                const latestReport = await getLatestReport();

                if (latestReport) {
                    console.log('Changes detected in polled report, re-rendering');

                    tableData = latestReport.report;
                    updateTimestamp = latestReport.lastUpdateTimestamp;

                    if (areNotificationsEnabled) {
                        const notificationBodyTokens = [];
                        for (let i = 0; i < latestReport.totals[0].length; i++) {
                            const totalTitle = latestReport.totals[0][i];
                            const totalCount = latestReport.totals[1][i];
                            notificationBodyTokens.push(`${totalTitle}: ${totalCount}`);
                        }
                        new Notification('New covid-19 case reports available', {
                            body: notificationBodyTokens.join('\n'),
                            icon: 'images/covid19.jpg',
                        });
                    }

                    updateRenderedTimestamp(updateTimestamp);
                    updateRenderedTotals(latestReport.totals);
                    sortBasedOffSortType(tableData, activeSort);
                } else {
                    console.log('No changes in polled report');
                }
            } catch (err) {
                console.error(`Failed to update report:\n${err}`);
            }

            reportUpdateTimeoutId = setTimeout(_updateReport, reportUpdatePollIntervalInMs);
        }, reportUpdatePollIntervalInMs);
    }

    function init() {        
        /*
            Enable sorting by location, only if the users browser
            supports it.
            https://caniuse.com/#feat=geolocation
        */
        if (!navigator.geolocation) {
            sortTypeDropdownOptions[sortTypeOptions.locationNearest].disabled = true;
        }

        sortTypeDropdown.addEventListener('input', event => {
            const sortType = event.target.value;
            sortBasedOffSortType(tableData, sortTypes[sortType]);
        });
        autoUpdateReportSwitchElem.addEventListener('input', event => {
            const isAutoUpdateReportEnabled = event.target.checked;
            if (isAutoUpdateReportEnabled) {
                initReportUpdatePoll();
            } else {
                window.clearTimeout(reportUpdateTimeoutId);
                reportUpdateTimeoutId = null;
            }
        });

        updateRenderedTimestamp(updateTimestamp);
        sortBasedOffSortType(tableData, activeSort);

        if (autoUpdateReportSwitchElem.checked) {
            initReportUpdatePoll();
        }
    }

    window.addEventListener('load', init);
</script>