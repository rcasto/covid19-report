<script>
    let tableData = <%-JSON.stringify(latestReportWithLocation)%>;
    const updateTimestamp = <%-JSON.stringify(lastUpdateTimestamp)%>;
    const reportTable = Array.prototype.slice.call(document.querySelectorAll('table'), 0)[1];
    const tableDataRows = 
        Array.prototype.slice.call(reportTable.querySelectorAll('tr'), 1);
    const sorts = {
        confirmedCounts: 2,
        deathCounts: 3,
        recoveredCounts: 4,
        locationNearest: 7,
    };

    const lastUpdateElem = document.querySelector('.last-update-timestamp');
    const currentDateString = (new Date()).toDateString();

    const sortTypeDropdown = document.getElementById('sort-type-dropdown');

    sortTypeDropdown.addEventListener('input', event => {
        const sortType = event.target.value;
        if (sortType === 'locationNearest') {
            navigator.geolocation.getCurrentPosition((pos) => {
                const { latitude, longitude } = pos.coords;
                sortTableDataByLocation(tableData, latitude, longitude);
            }, (err) => {
                console.error(err);
            });
        } else {
            sortTableDataByColumn(tableData, sorts[sortType]);
        }
    });

    function updateRenderedTimestamp(updateTimestamp) {
        lastUpdateElem.textContent = (new Date(updateTimestamp)).toLocaleString();
    }

    function sortTableDataByColumn(tableData, columnIndex, isAscending = false) {
        const sortedTableData = tableData
            .slice(1)
            .sort((row1, row2) => {
                const row1ColumnValue = row1[columnIndex]
                const row2ColumnValue = row2[columnIndex];
                if (isAscending) {
                    return row1ColumnValue - row2ColumnValue;
                }
                return row2ColumnValue - row1ColumnValue;
            });
        
        tableDataRows
            .forEach((tableDataRow, tableDataRowIndex) => {
                const sortedTableRow = sortedTableData[tableDataRowIndex];
                const tableDataRowCells = Array.prototype.slice.call(tableDataRow.querySelectorAll('td'));
                tableDataRowCells.forEach((tableDataRowCell, tableDataRowCellIndex) => {
                    tableDataRowCell.textContent = sortedTableRow[tableDataRowCellIndex];
                });
            });
    }

    function sortTableDataByLocation(tableData, lat, long) {
        tableData
            .slice(1)
            .forEach(tableRow => {
                const [rowLat, rowLong] = [
                    parseFloat(tableRow[5], 10),
                    parseFloat(tableRow[6], 10)
                ];
                const distance = `${getDistanceFromLatLonInMiles(rowLat, rowLong, lat, long)}`;

                if (typeof tableRow[7] === 'string') {
                    tableRow[7] = distance;
                } else {
                    tableRow.push(distance);
                }
            });

        sortTableDataByColumn(tableData, sorts.locationNearest, true);
    }

    // https://stackoverflow.com/a/27943 - Haversine formula
    const R = 6371 * 0.6213712; // Radius of the earth in miles
    const radianDegreeRatio = Math.PI / 180;
    function getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {
        const dLat = (lat2 - lat1) * radianDegreeRatio;
        const dLon = (lon2 - lon1) * radianDegreeRatio;
        const halfLat = dLat / 2;
        const halfLong = dLon / 2;
        const a = 
            Math.pow(Math.sin(halfLat), 2) +
            Math.cos(lat1 * radianDegreeRatio) * Math.cos(lat2 * radianDegreeRatio) * 
            Math.pow(Math.sin(halfLong), 2); 
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); 
        const d = R * c; // Distance in miles
        return d;
    }

    function init() {
        updateRenderedTimestamp(updateTimestamp);

        /*
            Enable sorting by location, only if the users browser
            supports it.
            https://caniuse.com/#feat=geolocation
        */
        if (!navigator.geolocation) {
            const locationSelection = document.querySelector('option[value=locationNearest]');
            locationSelection.disabled = true;
        }

        /*
            Enable server sent events, if the users browser
            supports it.
            https://caniuse.com/#feat=eventsource
        */
        // if (window.EventSource) {
        //     const eventSource = new EventSource('/api/latest-report-events');

        //     eventSource.addEventListener('open',
        //         () => console.log('Event source open'));
        //     eventSource.addEventListener('message', event => {
        //         const reportData = JSON.parse(event.data);
        //         tableData = reportData.parsed;
        //         updateRenderedTimestamp(reportData.lastUpdateTimestamp);
        //         sortTableDataByColumn(tableData, activeSort, activeSortAscending);
        //     });
        //     eventSource.addEventListener('error', console.error);

        //     window.addEventListener('beforeunload', () => {
        //         eventSource.close();
        //     });
        // }
    }

    init();
</script>